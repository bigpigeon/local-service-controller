/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bigpigeon/local-service-controller/pkg/apis/localservice_controller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LocalServiceLister helps list LocalServices.
type LocalServiceLister interface {
	// List lists all LocalServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.LocalService, err error)
	// LocalServices returns an object that can list and get LocalServices.
	LocalServices(namespace string) LocalServiceNamespaceLister
	LocalServiceListerExpansion
}

// localServiceLister implements the LocalServiceLister interface.
type localServiceLister struct {
	indexer cache.Indexer
}

// NewLocalServiceLister returns a new LocalServiceLister.
func NewLocalServiceLister(indexer cache.Indexer) LocalServiceLister {
	return &localServiceLister{indexer: indexer}
}

// List lists all LocalServices in the indexer.
func (s *localServiceLister) List(selector labels.Selector) (ret []*v1alpha1.LocalService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocalService))
	})
	return ret, err
}

// LocalServices returns an object that can list and get LocalServices.
func (s *localServiceLister) LocalServices(namespace string) LocalServiceNamespaceLister {
	return localServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LocalServiceNamespaceLister helps list and get LocalServices.
type LocalServiceNamespaceLister interface {
	// List lists all LocalServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.LocalService, err error)
	// Get retrieves the LocalService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.LocalService, error)
	LocalServiceNamespaceListerExpansion
}

// localServiceNamespaceLister implements the LocalServiceNamespaceLister
// interface.
type localServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LocalServices in the indexer for a given namespace.
func (s localServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LocalService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LocalService))
	})
	return ret, err
}

// Get retrieves the LocalService from the indexer for a given namespace and name.
func (s localServiceNamespaceLister) Get(name string) (*v1alpha1.LocalService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("localservice"), name)
	}
	return obj.(*v1alpha1.LocalService), nil
}
